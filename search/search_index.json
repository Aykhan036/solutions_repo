{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Projectile Motion: Range as a Function of the Angle of Projection 1. Theoretical Foundation We begin with the basic equations of motion for a projectile launched at angle \\(\\theta\\) with speed \\(v_0\\) , assuming: No air resistance Constant gravitational acceleration \\(g\\) Launch height = 0 Decomposing Motion Horizontal velocity: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{0y} = v_0 \\sin\\theta\\) Time of flight ( \\(T\\) ) until it hits the ground: \\[ T = \\frac{2v_0 \\sin\\theta}{g} \\] Range \\(R\\) is the horizontal distance traveled: \\[ R = v_{0x} \\cdot T = v_0 \\cos\\theta \\cdot \\frac{2v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the governing equation for range as a function of angle. 2. Analysis of the Range Key Observations Maximum range occurs at \\(\\theta = 45^\\circ\\) since \\(\\sin(2\\theta)\\) reaches its peak at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Effect of Parameters Initial velocity \\(v_0\\) : Range increases quadratically with \\(v_0\\) Gravity \\(g\\) : Range is inversely proportional to \\(g\\) (lower gravity = farther range) 3. Practical Applications This model can apply to: Sports (e.g., soccer, basketball) \u2013 adjusting launch angles for maximum range Engineering (e.g., missile trajectory, water jets) Astrophysics \u2013 modeling orbits and interplanetary trajectories (with modifications) Beyond Ideal Model Real-world considerations: - Air resistance (drag) - Wind - Non-zero launch height - Uneven terrain These factors require numerical integration and more complex models. 4. Implementation: Simulation in Python import numpy as np import matplotlib.pyplot as plt def compute_range(v0, g, angles_deg): angles_rad = np.radians(angles_deg) return (v0**2 * np.sin(2 * angles_rad)) / g # Parameters v0 = 50 # m/s g_values = [9.81, 3.71, 1.62] # Earth, Mars, Moon angles = np.linspace(0, 90, 500) # Plotting plt.figure(figsize=(10, 6)) for g in g_values: R = compute_range(v0, g, angles) plt.plot(angles, R, label=f'g = {g} m/s\u00b2') plt.title('Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.legend() plt.grid(True) plt.show() Colab Angel","title":"Projectile Motion: Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-range-as-a-function-of-the-angle-of-projection","text":"","title":"Projectile Motion: Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"We begin with the basic equations of motion for a projectile launched at angle \\(\\theta\\) with speed \\(v_0\\) , assuming: No air resistance Constant gravitational acceleration \\(g\\) Launch height = 0","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#decomposing-motion","text":"Horizontal velocity: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{0y} = v_0 \\sin\\theta\\) Time of flight ( \\(T\\) ) until it hits the ground: \\[ T = \\frac{2v_0 \\sin\\theta}{g} \\] Range \\(R\\) is the horizontal distance traveled: \\[ R = v_{0x} \\cdot T = v_0 \\cos\\theta \\cdot \\frac{2v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the governing equation for range as a function of angle.","title":"Decomposing Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Maximum range occurs at \\(\\theta = 45^\\circ\\) since \\(\\sin(2\\theta)\\) reaches its peak at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\)","title":"Key Observations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-parameters","text":"Initial velocity \\(v_0\\) : Range increases quadratically with \\(v_0\\) Gravity \\(g\\) : Range is inversely proportional to \\(g\\) (lower gravity = farther range)","title":"Effect of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model can apply to: Sports (e.g., soccer, basketball) \u2013 adjusting launch angles for maximum range Engineering (e.g., missile trajectory, water jets) Astrophysics \u2013 modeling orbits and interplanetary trajectories (with modifications)","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#beyond-ideal-model","text":"Real-world considerations: - Air resistance (drag) - Wind - Non-zero launch height - Uneven terrain These factors require numerical integration and more complex models.","title":"Beyond Ideal Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-simulation-in-python","text":"import numpy as np import matplotlib.pyplot as plt def compute_range(v0, g, angles_deg): angles_rad = np.radians(angles_deg) return (v0**2 * np.sin(2 * angles_rad)) / g # Parameters v0 = 50 # m/s g_values = [9.81, 3.71, 1.62] # Earth, Mars, Moon angles = np.linspace(0, 90, 500) # Plotting plt.figure(figsize=(10, 6)) for g in g_values: R = compute_range(v0, g, angles) plt.plot(angles, R, label=f'g = {g} m/s\u00b2') plt.title('Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.legend() plt.grid(True) plt.show() Colab Angel","title":"4. Implementation: Simulation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"\ud83d\udcd8 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation Governing Equation The forced damped pendulum is described by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\(\\theta\\) : Angular displacement \\(b\\) : Damping coefficient \\(g\\) : Acceleration due to gravity \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the external driving force \\(\\omega\\) : Frequency of the driving force Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , reducing the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order nonhomogeneous ODE with solutions that show: Damped oscillations Steady-state response Resonance at \\(\\omega \\approx \\sqrt{g/L}\\) Resonance and Energy Resonance occurs when the driving frequency \\(\\omega\\) matches the natural frequency of the system, leading to large amplitude oscillations and maximum energy transfer. \ud83d\udcca 2. Analysis of Dynamics We investigate how varying the parameters affects the motion of the pendulum: Low \\(b\\) : Less energy loss, more pronounced resonance High \\(A\\) : May push the system into nonlinear chaotic motion Varying \\(\\omega\\) : Shows resonance and off-resonance behavior Chaotic behavior arises when the system becomes sensitive to initial conditions and exhibits aperiodic, non-repeating behavior. \ud83d\udee0\ufe0f 3. Practical Applications Energy Harvesting : Nonlinear oscillations help capture ambient energy Suspension Bridges : Models external periodic forces like wind or traffic Electrical Circuits : Analogous to driven RLC circuits Biomechanics : Human walking (gait) under damping and periodic forcing \ud83d\udcbb 4. Implementation (Python Simulation & Visualizations) Below is a Python script using the 4th-order Runge-Kutta method to simulate the forced damped pendulum: ```python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.81 # gravity L = 1.0 # pendulum length b = 0.2 # damping coefficient A = 1.2 # amplitude of driving force omega = 2/3 # frequency of driving force Time settings dt = 0.01 T = 100 steps = int(T/dt) t = np.linspace(0, T, steps) Arrays theta = np.zeros(steps) omega_dot = np.zeros(steps) theta[0] = 0.2 # initial angle omega_dot[0] = 0 # initial angular velocity Equation of motion def d2theta_dt2(theta, omega_dot, t): return -b omega_dot - (g/L) np.sin(theta) + A np.cos(omega t) Runge-Kutta 4 for i in range(steps-1): k1_omega = dt * d2theta_dt2(theta[i], omega_dot[i], t[i]) k1_theta = dt * omega_dot[i] k2_omega = dt * d2theta_dt2(theta[i] + 0.5*k1_theta, omega_dot[i] + 0.5*k1_omega, t[i] + 0.5*dt) k2_theta = dt * (omega_dot[i] + 0.5*k1_omega) k3_omega = dt * d2theta_dt2(theta[i] + 0.5*k2_theta, omega_dot[i] + 0.5*k2_omega, t[i] + 0.5*dt) k3_theta = dt * (omega_dot[i] + 0.5*k2_omega) k4_omega = dt * d2theta_dt2(theta[i] + k3_theta, omega_dot[i] + k3_omega, t[i] + dt) k4_theta = dt * (omega_dot[i] + k3_omega) omega_dot[i+1] = omega_dot[i] + (1/6)*(k1_omega + 2*k2_omega + 2*k3_omega + k4_omega) theta[i+1] = theta[i] + (1/6)*(k1_theta + 2*k2_theta + 2*k3_theta + k4_theta) Plot plt.figure(figsize=(10,4)) plt.plot(t, theta, label=\"Theta(t)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.grid(True) plt.legend() plt.show() ``` https://colab.research.google.com/drive/1w2VFAx_vHqH_MjsYttkpVH8_P_HGvs81?usp=sharing","title":"\ud83d\udcd8 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83d\udcd8 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The forced damped pendulum is described by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\(\\theta\\) : Angular displacement \\(b\\) : Damping coefficient \\(g\\) : Acceleration due to gravity \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the external driving force \\(\\omega\\) : Frequency of the driving force","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , reducing the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order nonhomogeneous ODE with solutions that show: Damped oscillations Steady-state response Resonance at \\(\\omega \\approx \\sqrt{g/L}\\)","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-and-energy","text":"Resonance occurs when the driving frequency \\(\\omega\\) matches the natural frequency of the system, leading to large amplitude oscillations and maximum energy transfer.","title":"Resonance and Energy"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"We investigate how varying the parameters affects the motion of the pendulum: Low \\(b\\) : Less energy loss, more pronounced resonance High \\(A\\) : May push the system into nonlinear chaotic motion Varying \\(\\omega\\) : Shows resonance and off-resonance behavior Chaotic behavior arises when the system becomes sensitive to initial conditions and exhibits aperiodic, non-repeating behavior.","title":"\ud83d\udcca 2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Nonlinear oscillations help capture ambient energy Suspension Bridges : Models external periodic forces like wind or traffic Electrical Circuits : Analogous to driven RLC circuits Biomechanics : Human walking (gait) under damping and periodic forcing","title":"\ud83d\udee0\ufe0f 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation-visualizations","text":"Below is a Python script using the 4th-order Runge-Kutta method to simulate the forced damped pendulum: ```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb 4. Implementation (Python Simulation &amp; Visualizations)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"g = 9.81 # gravity L = 1.0 # pendulum length b = 0.2 # damping coefficient A = 1.2 # amplitude of driving force omega = 2/3 # frequency of driving force","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-settings","text":"dt = 0.01 T = 100 steps = int(T/dt) t = np.linspace(0, T, steps)","title":"Time settings"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#arrays","text":"theta = np.zeros(steps) omega_dot = np.zeros(steps) theta[0] = 0.2 # initial angle omega_dot[0] = 0 # initial angular velocity","title":"Arrays"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#equation-of-motion","text":"def d2theta_dt2(theta, omega_dot, t): return -b omega_dot - (g/L) np.sin(theta) + A np.cos(omega t)","title":"Equation of motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#runge-kutta-4","text":"for i in range(steps-1): k1_omega = dt * d2theta_dt2(theta[i], omega_dot[i], t[i]) k1_theta = dt * omega_dot[i] k2_omega = dt * d2theta_dt2(theta[i] + 0.5*k1_theta, omega_dot[i] + 0.5*k1_omega, t[i] + 0.5*dt) k2_theta = dt * (omega_dot[i] + 0.5*k1_omega) k3_omega = dt * d2theta_dt2(theta[i] + 0.5*k2_theta, omega_dot[i] + 0.5*k2_omega, t[i] + 0.5*dt) k3_theta = dt * (omega_dot[i] + 0.5*k2_omega) k4_omega = dt * d2theta_dt2(theta[i] + k3_theta, omega_dot[i] + k3_omega, t[i] + dt) k4_theta = dt * (omega_dot[i] + k3_omega) omega_dot[i+1] = omega_dot[i] + (1/6)*(k1_omega + 2*k2_omega + 2*k3_omega + k4_omega) theta[i+1] = theta[i] + (1/6)*(k1_theta + 2*k2_theta + 2*k3_theta + k4_theta)","title":"Runge-Kutta 4"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot","text":"plt.figure(figsize=(10,4)) plt.plot(t, theta, label=\"Theta(t)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.grid(True) plt.legend() plt.show() ``` https://colab.research.google.com/drive/1w2VFAx_vHqH_MjsYttkpVH8_P_HGvs81?usp=sharing","title":"Plot"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Kepler's Third Law - Orbital Period vs Orbital Radius (Circular Orbits) ```python import numpy as np import matplotlib.pyplot as plt Gravitational constant (m^3 kg^-1 s^-2) G = 6.67430e-11 Mass of the Earth (kg) M_earth = 5.972e24 Function to calculate orbital period for circular orbit def orbital_period(radius, M=M_earth): return 2 * np.pi * np.sqrt(radius**3 / (G * M)) Generate orbital radii from 7e6 m to 4e8 m radii = np.linspace(7e6, 4e8, 500) periods = orbital_period(radii) Plotting T^2 vs R^3 T_squared = periods 2 R_cubed = radii 3 plt.figure(figsize=(10, 6)) plt.plot(R_cubed, T_squared, label=\" \\(T^2\\) vs \\(R^3\\) \") plt.xlabel(\" \\(R^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.title(\"Verification of Kepler's Third Law (Circular Orbits)\") plt.grid(True) plt.legend() plt.show() Example: Moon's orbit around Earth R_moon = 3.844e8 # in meters T_moon = orbital_period(R_moon) print(f\"Orbital period of the Moon around Earth: {T_moon / (60 * 60 * 24):.2f} days\")","title":"Kepler's Third Law - Orbital Period vs Orbital Radius (Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-orbital-period-vs-orbital-radius-circular-orbits","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"Kepler's Third Law - Orbital Period vs Orbital Radius (Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravitational-constant-m3-kg-1-s-2","text":"G = 6.67430e-11","title":"Gravitational constant (m^3 kg^-1 s^-2)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mass-of-the-earth-kg","text":"M_earth = 5.972e24","title":"Mass of the Earth (kg)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-calculate-orbital-period-for-circular-orbit","text":"def orbital_period(radius, M=M_earth): return 2 * np.pi * np.sqrt(radius**3 / (G * M))","title":"Function to calculate orbital period for circular orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#generate-orbital-radii-from-7e6-m-to-4e8-m","text":"radii = np.linspace(7e6, 4e8, 500) periods = orbital_period(radii)","title":"Generate orbital radii from 7e6 m to 4e8 m"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3","text":"T_squared = periods 2 R_cubed = radii 3 plt.figure(figsize=(10, 6)) plt.plot(R_cubed, T_squared, label=\" \\(T^2\\) vs \\(R^3\\) \") plt.xlabel(\" \\(R^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.title(\"Verification of Kepler's Third Law (Circular Orbits)\") plt.grid(True) plt.legend() plt.show()","title":"Plotting T^2 vs R^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-moons-orbit-around-earth","text":"R_moon = 3.844e8 # in meters T_moon = orbital_period(R_moon) print(f\"Orbital period of the Moon around Earth: {T_moon / (60 * 60 * 24):.2f} days\")","title":"Example: Moon's orbit around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}